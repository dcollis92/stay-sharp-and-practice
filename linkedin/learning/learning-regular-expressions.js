/* 
Write text matching patterns

Regular expressions are an essential skill for any developer or computer programmer to have. They allow you to define text patterns that can be used for a variety of tasks. You can validate data submitted by users, your code can extract parts from longer strings, you can use them to convert data into a new format. They even make it easier to search your own code. In this course, we will learn the fundamentals of writing regular expressions. We will walk through each of the symbols that are the basic building blocks for more complex patterns. Through a series of simple demonstrations, you will learn how to put together an expression and how to anticipate the behavior of the program that will interpret it. Along the way, I will point out a number of pitfalls and common mistakes to avoid. My name is Kevin Skoglund. I've been a web developer for over 15 years, and I use regular expressions all the time, both in my code and to speed up my development. I consider regular expressions an indispensable tool. I'm excited to share what I've learned so that you can use them, too.
*/

/*----------------------------------------*/
/*
What are regular expressions?

Let's begin by answering the question, "What are regular expressions?" Regular expressions are a tool for searching and matching parts of a text by describing the patterns that should be used to identify those parts. A regular expression is a set of symbols that describes a text pattern. The plural of the name, regular expressions, refers to the larger formal language of the assembles that describe text patterns. Regular expressions are not a programming language. They're used for matching, searching, and replacing text. Now, they may seem similar to a programming language, because they are a formal language, that have a defined set of rules that a computer understands, but there are no variables, they don't set values, they don't contain instructions, and they can't make decisions. But most programming languages make lots of use of regular expressions. They're an important and useful tool for working with text. Every programmer should learn how to use them. Often, regular expressions are called regex for short. Sometimes you'll see it written with a P at the end, but that's not as common. You'll hear me say regex frequently because it's shorter and easier to say than regular expressions. Let's look at some of the ways that you might use regexes to work with text. You might test if a credit card number has the correct number of digits. Or you might use them to test if an email address is in a valid format. You could search a document for the word color and look for it spelled both ways, C-O-L-O-R or C-O-L-O-U-R. You could also search your document for all occurrences of Bob, Bobby, or B., and replace it with the more formal Robert. Or you could count how many times the word training is immediately preceded by the words computer, video, or online. In each case, we would use regular expressions to write a description of a desired pattern using symbols. For a phone number the pattern might be three digits, then a dash, then three more digits, then another dash, and finally four digits. We can use symbols to describe that pattern. Once we've defined our pattern, then the regex processor will use our description to look for matching results. The word matches is a keyword, and we're going to be using it a lot. A regular expression can be said to match text if it correctly describes the text. You can also flip that around and say that text matches a regular expression if it's correctly described by the expression. You can use it both ways. Regular expressions are patterns of symbols that match text.
*/

